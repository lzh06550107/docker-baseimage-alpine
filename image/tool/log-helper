#!/bin/bash -e

# 打印日志帮助函数
# log helper base on environment variable CONTAINER_LOG_LEVEL
# CONTAINER_LOG_LEVEL environment variable is set by run tool based on --log-level argument (info by default)
# or you can set it directly with docker --env argument

# Usage example: log-helper info CONTAINER_LOG_LEVEL is info or more
# the message "CONTAINER_LOG_LEVEL is info or more" will be printed only if log level is info, debug or trace

# 一个简单的bash工具，用于在日志级别上打印消息

LOG_LEVEL_NONE=0
LOG_LEVEL_ERROR=1
LOG_LEVEL_WARNING=2
LOG_LEVEL_INFO=3
LOG_LEVEL_DEBUG=4
LOG_LEVEL_TRACE=5

# default log level if CONTAINER_LOG_LEVEL is not set -> info
log_level=${CONTAINER_LOG_LEVEL:-${LOG_LEVEL_INFO}}

call=$1 # function to call (error, warning, info, debug, trace, level)
if [[ ! "$call" =~ ^(error|warning|info|debug|trace|level)$ ]]; then
    echo "Error: Function $call not found"
    echo "Allowed functions are: error, warning, info, debug, trace, level"
    echo "usage example: log-helper info hello !"
    exit 1
fi


echo_msg="" # message to print if required log level is set
echo_param="" # echo command parameters

function print_log(){
    local level_txt=$1
    local message=$2
    local date=$(date +"%Y-%m-%d %T")
    echo "*** ${level_txt} | ${date} | ${message}"
}

function error() {
    if [ $log_level -ge 1 ]; then
        getEchoParams $@
        echo $echo_param  "$(print_log " ERROR " "$echo_msg")"
    fi
}

function warning() {
    if [ $log_level -ge 2 ]; then
        getEchoParams $@
        echo $echo_param  "$(print_log "WARNING" "$echo_msg")"
    fi
}

function info() {
    if [ $log_level -ge 3 ]; then
        getEchoParams $@
        echo $echo_param "$(print_log " INFO  " "$echo_msg")"
    fi
}

function debug() {
    if [ $log_level -ge 4 ]; then
        getEchoParams $@
        echo $echo_param "$(print_log " DEBUG " "$echo_msg")"
    fi
}

function trace() {
    if [ $log_level -ge 5 ]; then
        getEchoParams $@
        echo $echo_param "$(print_log " TRACE " "$echo_msg")"
    fi
}

function getMsgFromStdin() {
    if [ -z "$2" ]; then
        echo_msg=$(cat)
    fi
}

function getEchoParams() {

    echo_msg="$@"

    if [[ "$1" =~ ^(-e|-n|-E)$ ]]; then
        echo_param=$1
        echo_msg=${echo_msg#$1 }
    fi

    # read from pipe if echo_msg is empty
    [[ -n "$echo_msg" ]] || getMsgFromStdin
}

function level() {

    local operator=$1
    local loglevel_str=$2
    local loglevel_str=${loglevel_str^^} # uppercase

    if [[ ! "$operator" =~ ^(eq|ne|gt|ge|lt|le)$ ]]; then
        echo "Error: Operator $operator not allowed"
        echo "Allowed operators are: eq, ne, gt, ge, lt, le"
        echo "Help: http://www.tldp.org/LDP/abs/html/comparison-ops.html"
        exit 1
    fi

    if [ -z "$loglevel_str" ]; then
        echo "Error: No log level provided"
        echo "Allowed log level are: none, error, warning, info, debug, trace"
        echo "usage example: log-helper level eq info"
        exit 1
    fi

    local log_level_var=LOG_LEVEL_$loglevel_str

    if [ $log_level -$operator ${!log_level_var} ]; then
        exit 0
    else
        exit 1
    fi
}

shift
$call "$@"
